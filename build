#!/usr/bin/env node
var powerset = require('powerset')
var components = require('./components')

function combinations () {
  var returned = powerset(
    components.filter(function (component) {
      return component.standard !== true
    })
  )
    .filter(function (combo) {
      return !combo.some(function (component) {
        return (
          (
            component.requires &&
            component.requires.some(function (requiredCode) {
              return !combo.some(function (otherComponent) {
                return otherComponent.code === requiredCode
              })
            })
          ) ||
          (
            component.conflicts &&
            component.conflicts.some(function (conflictingCode) {
              return combo.some(function (otherComponent) {
                return otherComponent.code === conflictingCode
              })
            })
          )
        )
      })
    })
    .map(function (combo) {
      return combo
        .map(function (component) {
          return component.code
        })
        .sort()
        .join('-')
    })
  returned[0] = 'BASE'
  return returned
}

function generate (identifier, stream, done) {
  identifier = identifier || 'BASE'

  var meta = require('./components')
  var codes = identifier === 'BASE'
    ? []
    : identifier.toUpperCase().split('-')

  var sorted = codes.every(function (code, index) {
    return (
      index === 0 ||
      code.localeCompare(codes[index - 1]) === 1
    )
  })
  if (!sorted) {
    return done('Identifier codes are not in alpha order.')
  }

  var used = new Array(codes.length)
  var fs = require('fs')
  var path = require('path')
  var VERSION = require('./version')
  var license = [
    'Berneout Kit License ' +
    (identifier === 'BASE' ? 'BASE' : identifier.toUpperCase()),
    // TODO: versioning
    'Version ' + VERSION,
    // TODO: canonical URIs
    'https://berneout.org/kit/' + VERSION + '/' + identifier
  ]

  meta.forEach(function (component) {
    if (component.standard) {
      if (component.code === 'CND') {
        var haveCondition = meta.some(function (component) {
          return (
            codes.indexOf(component.code.toUpperCase()) !== -1 &&
            component.condition
          )
        })
        if (haveCondition) {
          printComponent(component)
        }
      } else {
        printComponent(component)
      }
    } else {
      var index = codes.indexOf(component.code.toUpperCase())
      if (index !== -1) {
        used[index] = true
        printComponent(component)
      }
    }
  })

  var unused = []
  for (var index = 0; index < used.length; index++) {
    if (used[index] !== true) unused.push(codes[index])
  }

  if (unused.length !== 0) {
    return done(
      unused
        .map(function (unused) {
          stream.write('Invalid Code: ' + unused + '\n')
        })
        .join('\n')
    )
  }

  stream.write(license.join('\n\n') + '\n')
  done()

  function printComponent (component) {
    var file = path.join('components', component.code + '.md')
    var stars = component.conspicuous ? '**' : ''
    // Uniform Commercial Code 1-201(b)(10):
    //
    //   "Conspicuous", with reference to a term, means so
    //   written, displayed, or presented that a reasonable
    //   person against which it is to operate ought to have
    //   noticed it. Whether a term is "conspicuous" or not is
    //   a decision for the court. Conspicuous terms include
    //   the following:
    //
    //     (A) a heading in capitals equal to or greater in
    //         size than the surrounding text, or in
    //         contrasting type, font, or color to the
    //         surrounding text of the same or lesser size;
    //         and
    //
    //     (B) language in the body of a record or display
    //         in larger type than the surrounding text, or
    //         in contrasting type, font, or color to the
    //         surrounding text of the same size, or set off
    //         from surrounding text of the same size by
    //         symbols or other marks that call attention to
    //         the language.
    var label = component.standard ? '' : component.code.toUpperCase() + ': '
    var defence = require('defence')
    license.push(
      label +
      stars +
      defence(fs.readFileSync(file, 'utf8'))
        .replace(/[\n\r\s]+/g, ' ')
        .trim() +
      stars
    )
  }
}

var fs = require('fs')
var path = require('path')
combinations()
  .forEach(function (identifier) {
    var file = path.join(__dirname, 'licenses', identifier)
    generate(
      identifier,
      fs.createWriteStream(file),
      function (error) {
        if (error) process.stderr.write(error + '\n')
      }
    )
  })
