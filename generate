#!/usr/bin/env node

function generate (identifier, stream, callback) {
  var identifier = identifier || 'BASE'

  var meta = require('./components')
  var codes = identifier === 'BASE'
    ? []
    : identifier.toUpperCase().split('-')

  var sorted = codes.every(function (code, index) {
    return (
      index === 0 ||
      code.localeCompare(codes[index - 1]) === 1
    )
  })
  if (!sorted) {
    return callback('Identifier codes are not in alpha order.')
  }

  var used = new Array(codes.length)
  var fs = require('fs')
  var path = require('path')
  var VERSION = require('./version')
  var license = [
    'Berneout Kit License ' +
    (identifier === 'BASE' ? 'BASE' : identifier.toUpperCase()),
    // TODO: versioning
    'Version ' + VERSION,
    // TODO: canonical URIs
    'https://berneout.org/kit/' + VERSION + '/' + identifier
  ]

  meta.forEach(function (component) {
    if (component.standard) {
      printComponent(component)
    } else {
      var index = codes.indexOf(component.code.toUpperCase())
      if (index !== -1) {
        used[index] = true
        printComponent(component)
      }
    }
  })

  var unused = []
  for (var index = 0; index < used.length; index++) {
    if (used[index] !== true) unused.push(codes[index])
  }

  if (unused.length !== 0) {
    return callback(
      unused
        .map(function (unused) {
          stream.write('Invalid Code: ' + unused + '\n')
        })
        .join('\n')
    )
  }

  stream.write(license.join('\n\n') + '\n')
  callback()

  function printComponent (component) {
    var file = path.join('components', component.code + '.md')
    var stars = component.conspicuous ? '**' : ''
    // Uniform Commercial Code 1-201(b)(10):
    //
    //   "Conspicuous", with reference to a term, means so
    //   written, displayed, or presented that a reasonable
    //   person against which it is to operate ought to have
    //   noticed it. Whether a term is "conspicuous" or not is
    //   a decision for the court. Conspicuous terms include
    //   the following:
    //
    //     (A) a heading in capitals equal to or greater in
    //         size than the surrounding text, or in
    //         contrasting type, font, or color to the
    //         surrounding text of the same or lesser size;
    //         and
    //
    //     (B) language in the body of a record or display
    //         in larger type than the surrounding text, or
    //         in contrasting type, font, or color to the
    //         surrounding text of the same size, or set off
    //         from surrounding text of the same size by
    //         symbols or other marks that call attention to
    //         the language.
    var label = component.standard ? '' : component.code.toUpperCase() + ': '
    var defence = require('defence')
    license.push(
      label +
      stars +
      defence(fs.readFileSync(file, 'utf8'))
        .replace(/[\n\r\s]+/g, ' ')
        .trim() +
      stars
    )
  }
}

if (module.parent) {
  module.exports = generate
} else {
  generate(process.argv[2], process.stdout, function (error) {
    if (error) {
      process.stderr.write(error + '\n')
      process.exit(1)
    }
  })
}
